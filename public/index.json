[{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 #dotnet\n","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release #dotnet\n","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release #dotnet\n","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"},{"content":"1. Prepare Your Project Ensure that your project includes:\nA .csproj or .nuspec file with proper metadata. The PackageId, Version, and other relevant fields filled in the .csproj file or .nuspec. \u0026lt;PropertyGroup\u0026gt; \u0026lt;PackageId\u0026gt;YourPackageName\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;Description\u0026gt;Your package description\u0026lt;/Description\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 2. Set Up a GitHub Personal Access Token (PAT) Go to your GitHub account settings. Navigate to Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic). Generate a token with the write:packages and read:packages permissions. Add this token as a secret in your repository: Go to your repository’s Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret. Name the secret something like GH_PACKAGES_TOKEN. 3. Create a GitHub Actions Workflow Create a .yml file in the .github/workflows directory of your repository. For example, create .github/workflows/publish-nuget.yml:\nname: Publish NuGet Package on: push: tags: - \u0026#39;v*.*.*\u0026#39; # Trigger on version tags (e.g., v1.0.0) jobs: publish: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: \u0026#39;8.x\u0026#39; # Adjust according to your project - name: Restore dependencies run: dotnet restore - name: Build the project run: dotnet build --configuration Release --no-restore - name: Pack the NuGet package run: dotnet pack --configuration Release --no-build --output ./output - name: Publish to GitHub Packages run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.GH_PACKAGES_TOKEN }} --source \u0026#34;https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\u0026#34; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 4. Key Points in Workflow Trigger: The workflow triggers on push events with tags following a semantic versioning pattern (e.g., v1.0.0). Dotnet CLI Commands: dotnet restore: Restores project dependencies. dotnet build: Builds the project. dotnet pack: Creates the .nupkg file. dotnet nuget push: Publishes the package. Source URL: Replace \u0026lt;OWNER\u0026gt; in https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json with your GitHub username or organization name. 5. Push and Tag Your Release Commit and push your changes. Create a new tag: git tag v1.0.0 git push origin v1.0.0 ","permalink":"http://localhost:1313/posts/nuget-package/use-github-actions-to-publish-a-nuget-package-to-github-packages/","summary":"\u003ch3 id=\"1-prepare-your-project\"\u003e1. \u003cstrong\u003ePrepare Your Project\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eEnsure that your project includes:\u003c/p\u003e","title":"Publish NuGet to GitHub Packages with Actions"},{"content":" Project Structure: Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package. YourProject ├── lib │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.dll ├── docs │ └── README.md ├── contentFiles │ └── any │ └── any │ └── somefile.txt (optional) ├── tools │ └── someTool.exe (optional) ├── build │ └── net8.0 │ └── \u0026lt;Your Project\u0026gt;.targets (optional) └── \u0026lt;Your Project\u0026gt;.nuspec .nuspec File: Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file: \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;package \u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;YourLibrary\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;YourName\u0026lt;/authors\u0026gt; \u0026lt;owners\u0026gt;YourName\u0026lt;/owners\u0026gt; \u0026lt;readme\u0026gt;docs\\README.md\u0026lt;/readme\u0026gt; \u0026lt;description\u0026gt;Your library description\u0026lt;/description\u0026gt; \u0026lt;tags\u0026gt;tag\u0026lt;/tags\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;.NET8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;dependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;files\u0026gt; \u0026lt;file src=\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34; target=\u0026#34;lib\\net8.0\\\u0026#34; /\u0026gt; \u0026lt;file src=\u0026#34;..\\README.md\u0026#34; target=\u0026#34;docs\\\u0026#34; /\u0026gt; \u0026lt;!-- Add other necessary files here --\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/package\u0026gt; Building the NuGet Package: Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing. nuget pack YourProject.nuspec Automating with .csproj: Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file: \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; \u0026lt;PackageId\u0026gt;YourLibrary\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;YourName\u0026lt;/Authors\u0026gt; \u0026lt;PackageReadmeFile\u0026gt;README.md\u0026lt;/PackageReadmeFile\u0026gt; \u0026lt;Description\u0026gt;Your library description\u0026lt;/Description\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Include=\u0026#34;docs\\README.md\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;\\\u0026#34;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Release with NuGet Package: dotnet pack -c Release -o obj\\Release\\Nuget\\ Advanced(optional): [[Include XML documentation comments from your project in the NuGet package]] [[Use GitHub Actions to publish a NuGet package to GitHub Packages]] Additional \u0026rsquo;nuget\u0026rsquo; is not recognized To resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\nDownload nuget.exe from the official NuGet website. Add the directory containing nuget.exe to your system\u0026rsquo;s PATH environment variable. Warning NU5128 To address the NU5128 warning in NuGet, follow these steps:\nCheck Your Project Target Framework\nEnsure the project’s target framework is correctly specified in your .csproj or project settings (e.g., .NET 8.0).\nUpdate the .nuspec File\nModify your .nuspec file to include dependencies specific to the target framework. Below is an example:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;package\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;group targetFramework=\u0026#34;net8.0\u0026#34;\u0026gt; \u0026lt;dependency id=\u0026#34;SomeDependency\u0026#34; version=\u0026#34;1.0.0\u0026#34; /\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Other metadata elements --\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt; Ensure Proper Folder Structure\nThe package directory structure must align with the target framework. Place your DLLs in the appropriate lib folder as shown below: YourProject ├── lib │ └── net8.0 │ └── Utility.dll ├── docs │ └── README.md └── YourProject.nuspec ","permalink":"http://localhost:1313/posts/nuget-package/step-by-step-guide-to-create-a-nuget-package/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProject Structure:\u003c/strong\u003e Ensure your project structure follows the NuGet conventions. Specifically, the assemblies should be placed in the lib folder within your package.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYourProject \n├── lib \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.dll \n├── docs \n│   └── README.md \n├── contentFiles \n│   └── any \n│       └── any \n│           └── somefile.txt (optional) \n├── tools \n│   └── someTool.exe (optional) \n├── build \n│   └── net8.0 \n│       └── \u0026lt;Your Project\u0026gt;.targets (optional) \n└── \u0026lt;Your Project\u0026gt;.nuspec\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e.nuspec File:\u003c/strong\u003e Ensure your .nuspec file is correctly configured to include the necessary files. Here’s an example .nuspec file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;package\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;owners\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/owners\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;readme\u0026gt;\u003c/span\u003edocs\\README.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/readme\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;tags\u0026gt;\u003c/span\u003etag\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/tags\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;group\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetFramework=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.NET8.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dependency\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/group\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/metadata\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026lt;Your Project\u0026gt;.dll\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lib\\net8.0\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;file\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- Add other necessary files here --\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/files\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/package\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding the NuGet Package:\u003c/strong\u003e Use the nuget pack command to create the NuGet package. Make sure your project is built and the necessary files are in place before packing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enuget pack YourProject.nuspec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAutomating with .csproj:\u003c/strong\u003e Alternatively, you can use the .csproj file to automate the creation of the NuGet package. This approach leverages the dotnet pack command. Here’s an example of how to configure your .csproj file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-XML\" data-lang=\"XML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Project\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSdk=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Microsoft.NET.Sdk\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;TargetFramework\u0026gt;\u003c/span\u003enet8.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/TargetFramework\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;GeneratePackageOnBuild\u0026gt;\u003c/span\u003etrue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/GeneratePackageOnBuild\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageId\u0026gt;\u003c/span\u003eYourLibrary\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageId\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Version\u0026gt;\u003c/span\u003e1.0.0\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Version\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Authors\u0026gt;\u003c/span\u003eYourName\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Authors\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;PackageReadmeFile\u0026gt;\u003c/span\u003eREADME.md\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PackageReadmeFile\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;Description\u0026gt;\u003c/span\u003eYour library description\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Description\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/PropertyGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;None\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docs\\README.md\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePack=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePackagePath=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eRelease with NuGet Package:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edotnet pack -c Release -o obj\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eelease\u003cspan style=\"color:#ae81ff\"\u003e\\N\u003c/span\u003euget\u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced(optional):\u003c/strong\u003e\n[[Include XML documentation comments from your project in the NuGet package]]\n[[Use GitHub Actions to publish a NuGet package to GitHub Packages]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003ch3 id=\"nuget-is-not-recognized\"\u003e\u0026rsquo;nuget\u0026rsquo; is not recognized\u003c/h3\u003e\n\u003cp\u003eTo resolve the error where \u0026rsquo;nuget\u0026rsquo; is not recognized as a command:\u003c/p\u003e","title":"Create a NuGet Package Guide"},{"content":"Step 1: Enable XML Documentation Generation In your project, right-click and select \u0026ldquo;Properties\u0026rdquo;. In the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab. Check the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory. Step 2: Build the Project Build your Utility project to generate the XML documentation file.\nStep 3: Create the NuGet Package Open a command prompt or PowerShell window and navigate to your Utility project directory. Run the following command to create the NuGet package, which will include the XML documentation file: dotnet pack --configuration Release ","permalink":"http://localhost:1313/posts/nuget-package/include-xml-documentation-comments-from-your-project-in-the-nuget-package/","summary":"\u003ch2 id=\"step-1-enable-xml-documentation-generation\"\u003eStep 1: Enable XML Documentation Generation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn your project, right-click and select \u0026ldquo;Properties\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIn the project properties window, go to the \u0026ldquo;Build\u0026rdquo; tab.\u003c/li\u003e\n\u003cli\u003eCheck the \u0026ldquo;XML documentation file\u0026rdquo; checkbox and optionally provide a file path for the XML file. If left blank, it will generate the file in the output directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-build-the-project\"\u003eStep 2: Build the Project\u003c/h2\u003e\n\u003cp\u003eBuild your Utility project to generate the XML documentation file.\u003c/p\u003e","title":"Add XML Docs to NuGet"},{"content":" Objective: Understand how to push branches to a remote repository and manage remote branches.\n1. Push a Branch to Remote git push origin \u0026lt;branch-name\u0026gt; Example: git push origin feature-branch Practice pushing your branch to a remote repository. 2. Track a Remote Branch Locally git checkout --track origin/\u0026lt;branch-name\u0026gt; Example: git checkout --track origin/feature-branch 3. Pull Remote Changes into a Local Branch git pull origin \u0026lt;branch-name\u0026gt; Example: git pull origin main 4. Pull Changes from One Remote Branch into Another Local Branch git pull origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pulls changes from the main branch in the remote repository into the local feature branch. Example: git pull origin main:feature 5. Push Changes from One Local Branch into Another Remote Branch git push origin \u0026lt;source\u0026gt;:\u0026lt;destination\u0026gt; This command pushes changes from the local main branch to the feature branch in the remote repository. Example: git push origin main:feature Scenario Problem: You need to update your local qa-test branch with the latest changes from the remote main branch. After updating, you also want to push any new commits from qa-test back to a remote branch named qa-test. How do you accomplish this?\nMore About Push Ex. Deleting a Remote Branch\n","permalink":"http://localhost:1313/posts/git-branching/git-branching4-pushing-and-pulling-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to push branches to a remote repository and manage remote branches.\u003c/p\u003e","title":"Git Branching4-Pushing and Pulling Branches"},{"content":" Objective: Learn how to merge changes from one branch into another and manage branches.\n1. Merge a Branch into the Current Branch git merge \u0026lt;branch-name\u0026gt; Example: git merge new-feature 2. Delete a Branch Locally git branch -d \u0026lt;branch-name\u0026gt; Example: git branch -d new-feature Scenario Problem 1: You’ve made several changes in the feature-update branch and committed them. Now, you realize that the changes also need to be tested in a separate branch called qa-test. How do you ensure the qa-test branch has the latest changes from feature-update without losing any commits, and then switch back to the main branch?\nProblem 2: You need to merge bugfix-2024 into release and then delete the bugfix-2024 branch, but bugfix-2024 has some unmerged commits. How do you handle this situation?\nMore About Merge Ex. Squash Merge vs Base Merge\n","permalink":"http://localhost:1313/posts/git-branching/git-branching3-merging-and-deleting-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to merge changes from one branch into another and manage branches.\u003c/p\u003e","title":"Git Branching3-Merging and Deleting Branches"},{"content":" Objective: Understand the basics of creating and switching branches.\n1. List All Branches git branch 2. Create a New Branch git branch \u0026lt;branch-name\u0026gt; Example: git branch feature-branch 3. Switch to a Branch git checkout \u0026lt;branch-name\u0026gt; Example: git checkout feature-branch Quiz Scenario: Implementing a New Feature Based on the Latest Development Branch: You need to implement a new feature but must ensure that it is developed based on the latest development branch. How do you create a new branch named new-feature?\nSolution To create a new branch named new-feature, first ensure you are on the latest development branch by using git checkout main (assuming main is your main development branch), then create the new branch using git branch new-feature\n","permalink":"http://localhost:1313/posts/git-branching/git-branching1-getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand the basics of creating and switching branches.\u003c/p\u003e","title":"Git Branching1-Getting Started"},{"content":" Objective: Make changes in branches and understand basic workflows.\n1. Create and Switch to a New Branch git checkout -b \u0026lt;branch-name\u0026gt; Example: git checkout -b new-feature 2. Make Changes and Commit Make some changes to files in your working directory. Add changes to the staging area: git add . Commit the changes: git commit -m \u0026#34;Add new feature\u0026#34; 3. Switch Back to the Main Branch git checkout main ","permalink":"http://localhost:1313/posts/git-branching/git-branching2-working-with-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Make changes in branches and understand basic workflows.\u003c/p\u003e","title":"Git Branching2-Working with Branches"},{"content":" Objective: Learn how to apply specific commits from one branch to another using cherry-picking.\n1. Find the Commit Hash to Cherry-Pick Use git log to find the hash of the commit you want to cherry-pick. git log Example output (commit hash highlighted): commit abcdef1234567890abcdef1234567890abcdef12 Author: Your Name \u0026lt;you@example.com\u0026gt; Date: Date Commit message 2. Cherry-Pick the Commit git cherry-pick \u0026lt;commit-hash\u0026gt; Example: git cherry-pick abcdef1234567890abcdef1234567890abcdef12 You can also use a shortened version of the hash (usually the first 7 characters), as long as it is unique enough to identify the commit. Example of shortened hash: git cherry-pick abcdef1 This command applies the changes from the specified commit to your current branch. 3. Resolve Conflicts (if any) If conflicts arise during the cherry-pick, Git will notify you. Resolve conflicts manually, then add and commit the resolved changes. git add \u0026lt;file-with-conflicts\u0026gt; git cherry-pick --continue Scenario Problem: You need to apply a specific commit from feature-branch to your release branch. The commit hash is abcdef1234567890abcdef1234567890abcdef12, but you encounter conflicts. How do you resolve this?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching6-cherry-picking-commits/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Learn how to apply specific commits from one branch to another using cherry-picking.\u003c/p\u003e","title":"Git Branching6-Cherry-Picking Commits"},{"content":" Objective: Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\nIntro: Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit.\n1. Rebase a Branch onto Another Branch Switch to the branch you want to rebase: git checkout \u0026lt;branch-to-rebase\u0026gt; Example: git checkout feature-branch\tRebase the current branch onto another branch (e.g., main): git rebase \u0026lt;target-branch\u0026gt; Example: git rebase main This moves the entire branch to start from the tip of \u0026lt;target-branch\u0026gt;, replaying your commits on top of it. 2. Resolve Conflicts During Rebase If conflicts arise during the rebase, Git will pause and prompt you to resolve them. Resolve conflicts manually, then add the resolved files: git add \u0026lt;file-with-conflicts\u0026gt; Continue the rebase process: git rebase --continue 3. Abort a Rebase (if necessary) If you want to stop the rebase process and return to the original state, use: git rebase --abort This will cancel the rebase and restore your branch to its previous state. 4. Interactive Rebase For advanced manipulation of commits, you can use interactive rebase: git rebase -i \u0026lt;base-commit\u0026gt; Example: git rebase -i HEAD~3 This opens an editor where you can reorder, squash, or edit commits. Follow the instructions in the editor to modify commits. 5. Rebasing vs. Merging Rebasing rewrites history by applying your changes on top of another branch, resulting in a linear commit history. Merging combines changes from different branches without rewriting history, which can create a merge commit. Scenario Problem: You need to rebase feature-branch onto the latest main branch. During the rebase, you encounter multiple conflicts. After resolving conflicts, you also want to squash the last two commits in feature-branch into a single commit before finalizing the rebase. How do you proceed?\nMore About Rebase Ex. Deep Dive into Rebase\n","permalink":"http://localhost:1313/posts/git-branching/git-branching7-rebasing-branches/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Understand how to rebase branches to integrate changes and maintain a cleaner commit history.\u003c/p\u003e","title":"Git Branching7-Rebasing Branches"},{"content":" Objective: Gain confidence in more complex branch operations.\n1. Rename a Branch git branch -m \u0026lt;new-branch-name\u0026gt; Example: git branch -m renamed-branch 2. Delete a Remote Branch git push origin --delete \u0026lt;branch-name\u0026gt; Example: git push origin --delete feature-branch 3. List Remote Branches git branch -r ","permalink":"http://localhost:1313/posts/git-branching/git-branching8-more-branch-operations/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective:\u003c/strong\u003e Gain confidence in more complex branch operations.\u003c/p\u003e","title":"Git Branching8-More Branch Operations"},{"content":"Rebase What Rebase Does Rebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\nHere\u0026rsquo;s how rebasing works:\nRebase a Branch onto Another Branch: When you rebase feature-branch onto main, Git first determines the common ancestor of the two branches. Then, it takes all the commits from feature-branch that are not in main and re-applies them on top of main. git checkout feature-branch git rebase main Rebase Workflow: Rewind: Git temporarily removes the commits from feature-branch that are not in main, making it appear as if the branch is based on main. Replay: Git then applies each of the commits from feature-branch one by one onto the tip of main. How Rebase Affects Branching Rebasing can significantly affect how branches relate to each other. Here are some key points:\nLinear History: Rebasing creates a linear commit history, which can be easier to understand and follow. This is especially useful in collaborative projects where a clean history helps new contributors understand the changes that have been made. Conflicts: During the rebase process, if there are conflicting changes between the commits being rebased and the base branch (e.g., main), Git will pause and allow you to resolve these conflicts manually. After resolving conflicts, you continue the rebase. git add \u0026lt;resolved-file\u0026gt; git rebase --continue Changing Commit Hashes: Rebasing changes the commit hashes of the rebased commits because their parent commit has changed. This can be problematic if those commits have already been pushed to a shared repository because it requires a force push to update the remote branch. git push --force History Rewriting: Since rebase essentially rewrites history, it should be used with caution, particularly with shared branches. It\u0026rsquo;s generally safe to rebase local branches that haven\u0026rsquo;t been shared with others. For shared branches, it\u0026rsquo;s better to use merge. Avoiding Merge Commits: By using rebase, you can avoid unnecessary merge commits in the history. This makes the history cleaner but means you won\u0026rsquo;t see explicit points where branches were merged, which might hide the context of the changes. Example Scenario Consider this scenario:\nmain has commits A, B, and C. feature-branch has commits D and E based on commit B of main. main: A---B---C\r\\\rfeature: D---E After rebasing feature-branch onto main, the history would look like this:\nmain: A---B---C\r\\\rfeature: D\u0026#39;---E\u0026#39; Commits D and E are now reapplied on top of commit C in main, becoming D' and E'.\nUndo Rebase Undoing an Ongoing Rebase If you are in the middle of a rebase and want to stop and undo the changes:\nAbort the Rebase: This command will stop the rebase process and return your branch to the state it was in before the rebase started. git rebase —abort This will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nThis will discard all changes made during the rebase and reset the branch to its original state before the rebase was initiated.\nScenario: You are in the middle of rebasing feature-branch onto main, but decide to abort the process.\nInitial State:\nmain: A---B---C\r\\\rfeature-branch: D---E During Rebase:\nYou start rebasing feature-branch onto main, and Git is in the process of replaying commits D and E.\nmain: A---B---C\r\\\rfeature-branch: (D---E) [In progress] Aborting the Rebase:\nUse the command:\ngit rebase --abort\rFinal State (after aborting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n```\rUndoing a Completed Rebase If you have already completed the rebase and want to undo it:\nUse the ORIG_HEAD Reference: After a rebase, Git temporarily saves the previous state of your branch in ORIG\\_HEAD. You can reset your branch to this state. git reset --hard ORIG_HEAD This will reset your branch to the state it was in before the rebase. Note that this command will discard any changes made during the rebase, so use it with caution. Scenario: You have completed rebasing feature-branch onto main, but decide to undo it.\nInitial State (before rebase):\nmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased feature-branch onto main.\nmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Undoing the Rebase:\nUse the command:\ngit reset --hard ORIG_HEAD\rFinal State (after resetting to ORIG_HEAD):\nmain: A---B---C\r\\\rfeature-branch: D---E Undoing a Pushed Rebase If you have already pushed the rebased branch to a remote repository, undoing the rebase becomes more complex, especially if others have already started working on the rebased branch. Here are the steps:\nInform Your Team: Communicate with your team to ensure no one else is working on the rebased branch or has pulled the changes. This is crucial to avoid conflicts and lost work. Reset the Local Branch: Reset your local branch to the previous state before the rebase using ORIG\\_HEAD. git reset --hard ORIG_HEAD 3. **Force Push to the Remote:**\rForce push the reset branch to the remote repository to overwrite the rebased history. This should be done carefully and only if you are sure no one else is affected. ```\rgit push --force Scenario: You completed the rebase but ORIG\\_HEAD is not available. You will use the reflog to find the previous state.\nInitial State (before rebase):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**After Rebase:** You have successfully rebased `feature-branch` onto `main`. ```\rmain: A---B---C\r\\\rfeature-branch: D\u0026#39;---E\u0026#39; Using Reflog:\nView the reflog to find the commit before the rebase.\ngit reflog You find that the commit hash before the rebase was B.\nResetting to the Previous Commit:\nUse the commit hash found in the reflog.\ngit reset --hard \u0026lt;commit-hash\u0026gt; Final State (after resetting):\nmain: A---B---C\r\\\rfeature-branch: D---E Using a Reflog for More Complex Cases If ORIG\\_HEAD is not available or you need to undo more complex changes, you can use Git\u0026rsquo;s reflog to find the commit before the rebase and reset to that commit.\nView the Reflog: The reflog shows a history of all actions (including rebases) that have affected the HEAD. git reflog Find the Commit Before the Rebase: Identify the commit hash before the rebase started. Reset to the Previous Commit: Reset your branch to that commit. git reset \u0026ndash;hard ### Scenario: You pushed the rebased `feature-branch` to the remote and now need to undo it. **Initial State (before rebase):** ```\rmain: A---B---C\r\\\rfeature-branch: D---E After Rebase:\nYou have successfully rebased and pushed feature-branch to the remote.\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026rsquo;\u0026mdash;E'\n**Resetting Locally:** Use `ORIG\\_HEAD` to reset your local branch to the state before the rebase. ```\rgit reset --hard ORIG_HEAD Final State (locally after resetting):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n**Force Pushing to Remote:** Force push to update the remote branch. ```\rgit push --force Final State (remote and local are now in sync):\n``` main: A\u0026mdash;B\u0026mdash;C feature-branch: D\u0026mdash;E\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deep-dive-into-rebase/","summary":"\u003ch1 id=\"rebase\"\u003eRebase\u003c/h1\u003e\n\u003ch2 id=\"what-rebase-does\"\u003eWhat Rebase Does\u003c/h2\u003e\n\u003cp\u003eRebasing in Git is a process that allows you to move or combine a sequence of commits to a new base commit. This is particularly useful for keeping your commit history linear and clean, which can make it easier to follow the changes in a project.\u003cbr\u003e\nHere\u0026rsquo;s how rebasing works:\u003c/p\u003e","title":"Git Branching Ex-Deep Dive into Rebase"},{"content":"Introduction 111This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/1my-first-post---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e111This is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"1111My First Post1"},{"content":"🧩 Intent The yield keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\n💡 Description yield return \u0026lt;value\u0026gt;: Produces a value to the enumerator and pauses execution until the next iteration.\nyield break: Terminates the iteration early.\nWhen a method uses yield, the C# compiler automatically generates a state machine that implements IEnumerable and IEnumerator. This allows the method to pause and resume execution seamlessly across iterations.\n⚙️ Example IEnumerable\u0026lt;int\u0026gt; GetNumbers() { yield return 1; yield return 2; yield return 3; } foreach (var n in GetNumbers()) { Console.WriteLine(n); } Output:\n1\r2\r3 🚫 Early Termination Example IEnumerable\u0026lt;int\u0026gt; GetEvenNumbers(int max) { for (int i = 0; i \u0026lt;= max; i++) { if (i % 2 != 0) continue; if (i \u0026gt; 10) yield break; yield return i; } } This function stops producing values once i \u0026gt; 10.\n🧠 Use Cases Generating sequences on demand (lazy evaluation)\nCustom iteration over data structures\nStreaming or paging large data sets\nSimplifying iterator logic without manually implementing IEnumerable\n⚖️ Comparison Without yield With yield Must allocate a collection (e.g., List\u0026lt;T\u0026gt;) No extra collection needed Returns only after full computation Returns as soon as first value is ready Higher memory usage Lower memory footprint 🧭 Summary yield turns complex iterator logic into simple, readable code. It provides a pause-and-resume mechanism for methods, improving performance and readability in iterative scenarios.\n📚 References Microsoft Docs - yield (C# Reference)\nC# Iterators Overview\n","permalink":"http://localhost:1313/posts/csharp-keyword-yield/","summary":"\u003ch2 id=\"-intent\"\u003e🧩 Intent\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eyield\u003c/code\u003e keyword simplifies the creation of iterators by allowing a method to produce a sequence of values lazily, one at a time, without building a collection in memory.\u003c/p\u003e","title":"C# Yield"},{"content":" 新增字彙\n支援輸入日文假名／漢字\n中文意思\n詞性（動詞、名詞、形容詞等）\n額外備註（例句、聯想等）\n列出收藏字彙（字彙庫）\n依新增時間排序\n可顯示簡要資訊（詞性、意思）\n點擊可查看詳細資訊\n搜尋功能\n關鍵字搜尋（支援中文或日文）\n模糊搜尋、前綴／後綴匹配\n可搜尋例句或備註中的內容\n編輯／刪除字彙\n💡【延伸功能：進階強化與互動性】 等 MVP 完成後再考慮加入這些：\n單字測驗模式\n中翻日／日翻中\n類似記憶卡模式（flashcard）\n測驗結果紀錄\n字彙標籤分類\n使用者可以自定義「主題分類」或「程度分級」\n例如：JLPT N2、商用、旅行、情境用語\n複習提醒功能（記憶曲線演算法）\n根據使用者測驗結果安排複習時間 匯入／匯出功能\n支援 CSV 檔案\n可備份與分享字彙庫\n語音發音支援\n使用 Text-to-Speech 或外部 API 跨裝置同步（雲端備份）\n可選擇登入帳號，自動同步字彙資料 ","permalink":"http://localhost:1313/posts/japanese-app-mvp/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e新增字彙\u003c/strong\u003e\u003c/p\u003e","title":"Japanese APP MVP"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post---%E8%A4%87%E8%A3%BD---%E8%A4%87%E8%A3%BD/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\nThis is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text. This is bold text, and this is emphasized text.\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e","title":"My First Post1"},{"content":"When working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are squash merge and base (regular) merge. Each has its own use cases and implications for your commit history.\nBase (Regular) Merge A regular merge takes the contents of a source branch and integrates them into the target branch. This type of merge creates a merge commit that includes all the changes from the source branch, preserving the commit history.\nCharacteristics: Preserves Commit History: All commits from the source branch are preserved and visible in the commit history. Creates a Merge Commit: A new commit is created to represent the merge, indicating the point where the branches were combined. Commands: # Switch to the target branch git checkout main # Merge the feature branch into the target branch git merge feature-branch Example: main: A---B---C-------E\r\\ /\rfeature: D---F---G Here, E is the merge commit.\nSquash Merge A squash merge combines all the changes from the source branch into a single commit and then merges that commit into the target branch. This method does not preserve the individual commit history from the source branch.\nCharacteristics: Combines Commits: All commits from the source branch are combined into a single commit. Simplifies History: The commit history is simpler and cleaner, with only one commit representing all the changes from the source branch. Commands: # Switch to the target branch git checkout main # Squash and merge the feature branch into the target branch git merge --squash feature-branch # Commit the changes after squashing git commit -m \u0026#34;Squashed commit from feature-branch\u0026#34; Example: main: A---B---C---E\r\\\rfeature: D---F---G Here, E is the single commit representing all the changes from the feature-branch.\nComparison Aspect Base Merge Squash Merge Commit History Preserves all individual commits Combines all changes into a single commit, resulting in a simpler history Merge Commit Creates a merge commit No merge commit; a single squashed commit is added to the target branch Traceability Easier to trace the development history and individual changes Harder to trace individual changes but results in a cleaner history Use Cases Base (Regular) Merge: When you want to preserve the detailed commit history. Useful for large teams where individual contributions need to be tracked. When you need to maintain the context of each change. Squash Merge: When you prefer a clean and simplified commit history. Suitable for small, well-defined features or bug fixes. Ideal for repositories where keeping history concise is more important than individual commit details. ","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-squash-merge-vs-base-merge/","summary":"\u003cp\u003eWhen working with Git, merging is a crucial part of integrating changes from different branches. Two common types of merges are \u003cstrong\u003esquash merge\u003c/strong\u003e and \u003cstrong\u003ebase (regular) merge\u003c/strong\u003e. Each has its own use cases and implications for your commit history.\u003c/p\u003e","title":"Git Branching Ex-Squash Merge vs Base Merge"},{"content":" Objective: Learn how to delete a remote branch from your repository.\nBrief Introduction to the Command: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt;: This command deletes a specified branch from the remote repository. The \u0026lt;remote-name\u0026gt; is usually origin for the default remote repository, and \u0026lt;branch-name\u0026gt; is the name of the branch you want to delete. Steps: Identify the Branch to Delete: Make sure you know the exact name of the branch you want to delete. You can list all branches, including remote ones, with the command: git branch -a Delete the Remote Branch: Use the following command to delete the branch from the remote repository: git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; For example, if you want to delete a branch named feature-branch from the remote repository named origin: git push origin --delete feature-branch Shortened version: git push origin -d feature-branch Verify the Deletion: Fetch the latest state of the remote repository to update your local information about the remote branches: git fetch List the remote branches to ensure the branch has been deleted: git branch -r Example Workflow: List Remote Branches: git branch -r Output might look like: origin/HEAD -\u0026gt; origin/main origin/development origin/feature-branch origin/hotfix Delete the Remote Branch: git push origin -d feature-branch This command will delete feature-branch from the remote repository. Verify the Deletion: Fetch the latest state of the remote repository: git fetch List the remote branches again: git branch -r Output should no longer include origin/feature-branch: origin/HEAD -\u0026gt; origin/main origin/development origin/hotfix Problem: You have completed a feature and merged it into the main branch. Now you need to clean up by deleting the remote branch named old-feature. How do you delete this branch from the remote repository?\n","permalink":"http://localhost:1313/posts/git-branching/git-branching-ex-deleting-a-remote-branch/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e: Learn how to delete a remote branch from your repository.\u003c/p\u003e","title":"Git Branching Ex-Deleting a Remote Branch"}]